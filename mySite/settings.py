"""
Django settings for mySite project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'xr@o(931$)7r&m62thj*r=j-mo#=2&qltc+(*4=gm54d-kdu)t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app01',
    'app02',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'mySite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mySite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test00',
        'USER':'root',
        'PASSWORD':'123',
    },
    'test01': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'test01',
            'USER':'root',
            'PASSWORD':'123',
        },
    'test02': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'test02',
            'USER':'root',
            'PASSWORD':'123',
        }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'



# class App01Router(object):
#     """
#     A router to control all database operations on models in the
#     auth application.
#     """
#     def db_for_read(self, model, **hints):
#         """
#         Attempts to read auth models go to auth_db.
#         """
#         if model._meta.app_label == 'app01':
#             return 'test01'
#         return None
#
#     def db_for_write(self, model, **hints):
#         """
#         Attempts to write auth models go to auth_db.
#         """
#         if model._meta.app_label == 'app01':
#             return 'test01'
#         return None
#
#     def allow_relation(self, obj1, obj2, **hints):
#         """
#         Allow relations if a model in the auth app is involved.
#         """
#         if obj1._meta.app_label == 'app01' or \
#            obj2._meta.app_label == 'app01':
#            return True
#         return None
#
#     def allow_migrate(self, db, app_label, model=None, **hints):
#         """
#         Make sure the auth app only appears in the 'auth_db'
#         database.
#         """
#         if app_label == 'app01':
#             return db == 'test01'
#         return None
#
#
# import random
#
# class App02Router(object):
#     def db_for_read(self, model, **hints):
#         """
#         Reads go to a randomly-chosen replica.
#         """
#         # return random.choice(['test01', 'test02'])
#         if model._meta.app_label == 'app02':
#             return 'test02'
#         return None
#
#     def db_for_write(self, model, **hints):
#         """
#         Writes always go to primary.
#         """
#         if model._meta.app_label == 'app02':
#             return 'test02'
#         return None
#
#     def allow_relation(self, obj1, obj2, **hints):
#         """
#         Relations between objects are allowed if both objects are
#         in the primary/replica pool.
#         """
#         db_list = ('test02')
#         if obj1._state.db in db_list and obj2._state.db in db_list:
#             return True
#         return None
#
#     def allow_migrate(self, db, app_label, model=None, **hints):
#         """
#         All non-auth models end up in this pool.
#         """
#         if app_label == 'app02':
#             return True
#         return None

DATABASE_ROUTERS = [
    # '.'.join([BASE_DIR,'mySite','settings','App01Router']),
    # os.path.join(BASE_DIR,'mySite','settings.py','App02Router')
    # 'settings.App01Router','settings.App02Router'
    'mySite.router.App01Router',
    'mySite.router.App02Router',
]